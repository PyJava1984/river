/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import net.jini.jrmp.JrmpExporter;
import net.jini.security.BasicProxyPreparer;
import java.rmi.activation.ActivationID;
import net.jini.discovery.ConstrainableLookupLocator;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.constraint.BasicMethodConstraints.MethodDesc;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import com.sun.jini.discovery.MulticastTimeToLive;

multicast {
    private ttl = 1;
}

/* Items required by the test harness framework:
 * 
 * - special configuration item used by the test harness
 *   framework to dynamically generate unique directory paths
 *   for the service's persistence directory.
 */
/* Items required by the service */
lookupSimulator {
    locatorConstraints = discoveryConstraints;

    discoveryConstraints = new BasicMethodConstraints(
        new MethodDesc[] {
            new MethodDesc(new InvocationConstraints(
                new InvocationConstraint[] {
                    new MulticastTimeToLive(multicast.ttl)
                },
                null
            ))
        }
    );

//    loginContext = foo; //can't define this as null
    activationIdPreparer = new BasicProxyPreparer();
    activationSystemPreparer = new BasicProxyPreparer();
}

exporter {
    name = "lookupSimulator.serverExporter";
    activatableExporter = new JrmpExporter((ActivationID) $data, 0);
    persistentExporter = new JrmpExporter();
    transientExporter = persistentExporter;
}
