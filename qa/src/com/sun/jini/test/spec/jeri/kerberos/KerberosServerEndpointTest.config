/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//JERI imports
import net.jini.core.constraint.ClientMaxPrincipal;
import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.jeri.ServerEndpoint;
import net.jini.jeri.kerberos.KerberosServerEndpoint;
import net.jini.jeri.kerberos.KerberosEndpoint;

//javax.security
import javax.security.auth.kerberos.KerberosPrincipal;

com.sun.jini.test.spec.jeri.serverendpoint {
    //Endpoint to run interface based tests against
    endpoint = KerberosServerEndpoint.getInstance(9090);
    //Endpoints for Equality tests
    equalEndpoint = KerberosServerEndpoint.getInstance(9090);
    diffEndpoint = KerberosServerEndpoint.getInstance(9091);
    //Number of listen endpoint expected
    expectedListenEndpoints = new Integer(1);
    //Set to true if hasNext() is expected to return true at least once
    usefulIterator = new Boolean(true);
    //ServerEndpoint factory class
    serverEndpointFactory = KerberosServerEndpoint.class;
    //Endpoint factory class
    endpointFactory = KerberosEndpoint.class;
    //Conflicting InvovationConstraints
    private principal1 = new KerberosPrincipal("client@DAVIS.JINI.SUN.COM");
    private principal2 = new KerberosPrincipal("server@DAVIS.JINI.SUN.COM");
    private maxPrincipal1 = new ClientMaxPrincipal(principal1);
    private maxPrincipal2 = new ClientMaxPrincipal(principal2);
    conflictingConstraints = new InvocationConstraints(
        new InvocationConstraint[]{maxPrincipal1,maxPrincipal2},
        new InvocationConstraint[]{});
    //Unsupported InvocationConstraints
    unsupportedConstraints = new InvocationConstraints(
        ClientAuthentication.NO,null);
    //Integrity Supported
    integritySupported = new Boolean(true);
}


test {

    loginContext = null;
}

com.sun.jini.qa.harness.config {
    props = "";
}
