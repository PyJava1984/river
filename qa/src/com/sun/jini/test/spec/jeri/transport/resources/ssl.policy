/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** This policy file is used by multiple SslServerEndpoint and
 *  HttpsServerEndpoint tests.  The tests are concerned with
 *  net.jini.security.AuthenticationPermission, so it is ok to
 *  specify a permissive policy for codebases.  AuthenticationPermission
 *  should only be granted to specific principals.  An implementation
 *  implication of the server endpoint classes requires
 *  java.net.SocketPermission not be as permissive when granted to codebases.
 */
keystore "${keyStoreURL}";

/**
 * The following two grants grant permissions to the test harness and the
 * tests
 */
grant codebase "file:${com.sun.jini.qa.harness.harnessJar}" {
    permission java.util.logging.LoggingPermission "control";
    permission java.io.FilePermission "<<ALL FILES>>", "read,write";
    permission java.util.PropertyPermission "*", "read,write";
    permission javax.security.auth.AuthPermission "*";
    permission java.lang.RuntimePermission "createSecurityManager";
};

grant codebase "file:${com.sun.jini.qa.harness.testJar}" {
    permission java.util.logging.LoggingPermission "control";
    permission java.io.FilePermission "<<ALL FILES>>", "read,write";
    permission java.util.PropertyPermission "*", "read,write";
    permission javax.security.auth.AuthPermission "*";
    permission java.lang.RuntimePermission "createSecurityManager";
};

grant codebase "file:${com.sun.jini.jsk.home}${/}lib/jsk-platform.jar" {
    permission java.security.AllPermission "", "";
};

/**
 * Grant permissions to the code when executing as a principal.  These are the
 * grants relevant to the tests.
 */
grant principal "server" {
    permission java.net.SocketPermission "*", "connect,accept";
    permission net.jini.security.AuthenticationPermission
        "* \"*\" peer javax.security.auth.x500.X500Principal \"server\"",
        "accept,connect";
};

/**
 * The following grant is only used during test development when the
 * tests do not reside inside qa1.jar
 */
grant codebase "file:/vob/qa/classes/" {
    permission java.util.logging.LoggingPermission "control";
    permission java.io.FilePermission "<<ALL FILES>>", "read,write";
    permission java.util.PropertyPermission "*", "read,write";
    permission javax.security.auth.AuthPermission "*";
    permission java.lang.RuntimePermission "createSecurityManager";
};



