/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Configuration source file for SSL Mercury */

import com.sun.jini.phoenix.*;

import net.jini.activation.*;
import net.jini.config.*;
import net.jini.constraint.*;
import net.jini.core.constraint.*;
import net.jini.jeri.*;
import net.jini.jeri.kerberos.KerberosServerEndpoint;
import net.jini.jeri.security.*;
import net.jini.security.*;
import net.jini.security.proxytrust.*;
import net.jini.export.ExportPermission;

import java.rmi.activation.ActivationID;
import java.security.Permission;
import java.util.Collections;

import javax.security.auth.login.LoginContext;
import javax.security.auth.kerberos.KerberosPrincipal;

com.sun.jini.test.impl.mercury.generator {

    /*
     * JAAS login and principals
     */
    loginContext = new LoginContext("com.sun.jini.Test");

    /* Principals */
    static mercury =
        new KerberosPrincipal("${mercury}");
    private static phoenix =
        new KerberosPrincipal("${phoenix}");
    private static reggie =
        new KerberosPrincipal("${reggie}");
    static tester =
        new KerberosPrincipal("${test}");

    /*
     * Service exporter and client proxy preparers
     */
    exporter =
        new BasicJeriExporter(
            KerberosServerEndpoint.getInstance(0),
                new BasicILFactory(
                        new BasicMethodConstraints(
                    new InvocationConstraints(
                        new InvocationConstraint[]{
                        Integrity.YES,
                        ClientAuthentication.YES}, null)),
                    ExportPermission.class));
}

/* the preparer that a test should use for the generator's proxy */
preparer {
   //Not used
}

