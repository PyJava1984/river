/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import net.jini.discovery.ConstrainableLookupLocator;
import net.jini.core.discovery.LookupLocator;
import net.jini.activation.ActivationExporter;
import net.jini.id.UuidFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.tcp.*;
import net.jini.security.BasicProxyPreparer;
import java.rmi.activation.ActivationID;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.constraint.BasicMethodConstraints.MethodDesc;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import com.sun.jini.discovery.MulticastTimeToLive;
import com.sun.jini.test.impl.mercury.DelayedBasicJeriExporter;

multicast {
    private ttl = 1;
}

com.sun.jini.mercury {
    locatorConstraints = net.jini.discovery.LookupDiscovery.discoveryConstraints;
    activationSystemPreparer=new BasicProxyPreparer();
}

net.jini.lookup.JoinManager {
    registrarPreparer = new BasicProxyPreparer();
    registrationPreparer = new BasicProxyPreparer();
    serviceLeasePreparer = new BasicProxyPreparer();
}

net.jini.discovery.LookupDiscovery {
    registrarPreparer = new BasicProxyPreparer();
    discoveryConstraints = new BasicMethodConstraints(
        new MethodDesc[] {
            new MethodDesc(new InvocationConstraints(
                new InvocationConstraint[] {
                    new MulticastTimeToLive(multicast.ttl)
                },
                null
            ))
        }
    );
}

net.jini.discovery.LookupLocatorDiscovery {
    registrarPreparer = new BasicProxyPreparer();
}

exporter {
    private fixedUuid = UuidFactory.create(999L,999L);
    private fixedDelay = 60000L;
    name = "com.sun.jini.mercury.serverExporter";
    private defaultendpoint = TcpServerEndpoint.getInstance(9999);
    private defaultfactory = new BasicILFactory();
    activatableExporter = new ActivationExporter(
                        (ActivationID) $data,
                        new DelayedBasicJeriExporter(defaultendpoint, 
					      defaultfactory,
                                              false,
                                              true,
                                              fixedUuid,
                                              fixedDelay));
    persistentExporter = 
        new DelayedBasicJeriExporter(
            defaultendpoint, defaultfactory, false, true, fixedUuid, fixedDelay);
    transientExporter = 
        new DelayedBasicJeriExporter(
            defaultendpoint, defaultfactory, false, true, fixedUuid, fixedDelay);
}


